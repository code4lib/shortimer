# Django settings for shortimer project.

# email account to pop for new job emails, and sending out new emails

EMAIL_HOST = "pop.gmail.com"
EMAIL_PORT = 587
EMAIL_POP_PORT = 995
EMAIL_HOST_USER = "jobs4lib@gmail.com"
EMAIL_HOST_PASSWORD = "your-password-here"
EMAIL_USE_TLS = True
EMAIL_ANNOUNCE = ['you@example.com', 'me@example.com']

# socialauth credentials for logins at various providers

TWITTER_CONSUMER_KEY = ''
TWITTER_CONSUMER_SECRET = ''
FACEBOOK_APP_ID = '' 
FACEBOOK_API_SECRET = ''
LINKEDIN_CONSUMER_KEY = ''
LINKEDIN_CONSUMER_SECRET = ''
GITHUB_APP_ID = ''
GITHUB_API_SECRET = ''
GOOGLE_CONSUMER_KEY = ''
GOOGLE_CONSUMER_SECRET = ''
GOOGLE_DISPLAY_NAME = ''

# credentials for the code4lib twitter account, to tweet new job postings

CODE4LIB_TWITTER_OAUTH_CONSUMER_KEY = ''
CODE4LIB_TWITTER_OAUTH_CONSUMER_SECRET = ''
CODE4LIB_TWITTER_OAUTH_ACCESS_TOKEN_KEY = ''
CODE4LIB_TWITTER_OAUTH_ACCESS_TOKEN_SECRET = ''

# bitly credentials for shortening job urls

BITLY_USERNAME = ''
BITLY_PASSWORD = ''

# you shouldn't need to change anything else below unless you want to 
# modify database connection to be something other than sqlite

import os

PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(PROJECT_DIR, "logs")

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'jobs.db',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = False
DATETIME_FORMAT = 'Y-m-d H:i:s T'

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# URL prefix for admin static files -- CSS, JavaScript and images.
# Make sure to use a trailing slash.
# Examples: "http://foo.com/static/admin/", "/static/admin/".
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Additional locations of static files
STATICFILES_DIRS = (
    os.path.join(PROJECT_DIR, 'static/'),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '=z7loor%*+!h_3c_#$&w89g9#sh7t+=xb@u-yb+=(tyd4v_^dp'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'pagination.middleware.PaginationMiddleware',
)

ROOT_URLCONF = 'shortimer.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.core.context_processors.request',
    'django.core.context_processors.static',
)


INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.sitemaps',
    'south',
    'shortimer.jobs',
)

AUTHENTICATION_BACKENDS = (
    'social_auth.backends.twitter.TwitterBackend',
    'social_auth.backends.facebook.FacebookBackend',
    'social_auth.backends.contrib.linkedin.LinkedinBackend',
    'social_auth.backends.contrib.github.GithubBackend',
)

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGIN_ERROR_URL = '/login-error/'

TWITTER_EXTRA_DATA = [('profile_image_url', 'profile_image_url')]

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'pop': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'simple',
            'filename': os.path.join(LOG_DIR, 'pop.log')
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'shortimer.jobs.management.commands.pop': {
            'handlers': ['pop'],
            'level': 'DEBUG',
            'propagate': True,
        }
    }
}

USE_THOUSAND_SEPARATOR = True

JOB_FEEDS = [
    'http://joblist.ala.org/news/',
    'http://archivesgig.livejournal.com/data/atom',
    'http://publicboard.libgig.com/feeds/rss20',
    'http://feeds.feedburner.com/alljobs',
    'http://digital-scholarship.org/digitalkoans/category/digital-library-jobs/feed/',
    'http://www.idealist.org/search/v2/feeds?qs=QlpoOTFBWSZTWROKb4MAAHofgAMIcAIFAAQAv_f_oDAAtjDUJkZGT1GIZMQ0Gk0jZI0NAAeoAxIho0yZTT1A09IGnsaBMZv-SQETKJOFDVQsdpnWDKDuzV4JW8kjKyEyQmjaXJ9RvxmSNJBOdtPsEqMSOOj-u9MR9G0dRMUKrckQVmqWMoGDWxEL3sHHKYZhuzB_w67dyymKrznR2ZVRXUkYvdgHpRe2fJA0X6ksIBkshEdloJ4XuEkfdpnr_F3JFOFCQE4pvgw%3D',
    'http://www.alia.org.au/rss/vacancies.php',
    'http://www.higheredjobs.com/rss/categoryFeed.cfm?catID=34',
]

GA_USERNAME = ""
GA_PASSWORD = ""
GA_PROFILE_ID = ""
